download openmplab.tar from ccle

$ scp /Users/wangjingtao/Downloads/openmplab.tar jingtaow@lnxsrv09.seas.ucla.edu:~/
copy tar file to linux server

$ tar -xvf openmplab.tar
unzip the file

$ cd openmplab
$ make seq
$ ./seq
run the make file and executable

FUNC TIME : 0.471328
TOTAL TIME : 2.348910

$ make check
check if the function is right at the beginning

$ make clean
$ make seq GPROF=1
$ ./seq
$ gprof seq | less

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 67.89      0.40     0.40       15    26.70    28.10  func1
 18.67      0.51     0.11  5177344     0.00     0.00  rand2
  5.09      0.54     0.03        1    30.04   119.27  addSeed
  3.39      0.56     0.02                             sequence
  1.70      0.57     0.01       15     0.67     0.67  func2
  1.70      0.58     0.01       15     0.67     0.67  func4
  1.70      0.59     0.01        1    10.01    10.01  imdilateDisk
  0.00      0.59     0.00   983042     0.00     0.00  round
  0.00      0.59     0.00   491520     0.00     0.00  findIndexBin
  0.00      0.59     0.00       16     0.00     0.00  dilateMatrix
  0.00      0.59     0.00       15     0.00     0.00  func3
  0.00      0.59     0.00       15     0.00     0.00  func5
  0.00      0.59     0.00       15     0.00     0.00  rand1
  0.00      0.59     0.00        2     0.00     0.00  get_time
  0.00      0.59     0.00        1     0.00     0.00  elapsed_time
  0.00      0.59     0.00        1     0.00     0.00  fillMatrix
  0.00      0.59     0.00        1     0.00     0.00  func0
  0.00      0.59     0.00        1     0.00     0.00  getNeighbors

func1 takes more than 60% of time, the task is to speed up func1

emacs func.c
int i, j;
        int index_X, index_Y;
        int max_size = X*Y*Z;

        #pragma	     omp parallel for
        for(i = 0; i < n; i++){
                arrayX[i] += 1 + 5*rand2(seed, i);
                arrayY[i] += -2 + 2*rand2(seed, i);
        }

#pragma omp parallel for private(index_X,index_Y,j)
        for(i = 0; i<n; i++){
                for(j = 0; j < Ones; j++){
                        index_X = round(arrayX[i]) + objxy[j*2 + 1];
add two lines starting with #

$ make clean
$ make check
gcc -o omp  -O3 -fopenmp filter.c main.c func.c util.c -lm
cp omp filter
./filter
FUNC TIME : 0.106902
TOTAL TIME : 2.038464
diff --brief correct.txt output.txt
the output file is correct

$ make omp MTRACE=1
$ ./omp
FUNC TIME : 0.104086
TOTAL TIME : 2.131225
FUNC TIME has improved by 5 times

$make checkmem | less
-----------------
           Address     Size     Caller
addr2line: 'filter': No such file
0x000000000271ad10     0xc0  at 
addr2line: 'filter': No such file
0x000000000271ade0    0x108  at 
addr2line: 'filter': No such file
0x000000000271aef0    0x240  at 
0x000000000271b140    0x240  at 
0x000000000271b390    0x240  at 
0x000000000271b5e0    0x240  at 
0x000000000271b830    0x240  at 
0x000000000271ba80    0x240  at 
0x000000000271bcd0    0x240  at 
0x000000000271bf20    0x240  at 
0x000000000271c170    0x240  at 
0x000000000271c3c0    0x240  at 
0x000000000271c610    0x240  at 
0x000000000271c860    0x240  at 
0x000000000271cab0    0x240  at 
0x000000000271cd00    0x240  at 
0x000000000271cf50    0x240  at 
0x000000000271d1a0    0x240  at  