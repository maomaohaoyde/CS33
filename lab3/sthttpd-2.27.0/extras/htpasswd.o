	.file	"htpasswd.c"
	.comm	tfd,4,4
	.globl	temp_template
	.data
	.align 16
	.type	temp_template, @object
	.size	temp_template, 16
temp_template:
	.string	"/tmp/htp.XXXXXX"
	.text
	.type	strd, @function
strd:
.LFB2:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	strlen
	addq	$1, %rax
	movq	%rax, %rdi
	call	malloc
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	strcpy
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE2:
	.size	strd, .-strd
	.type	getword, @function
getword:
.LFB3:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, %eax
	movb	%al, -36(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -8(%rbp)
	jmp	.L4
.L6:
	movl	-8(%rbp), %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rax
	addq	%rax, %rdx
	movl	-8(%rbp), %eax
	movslq	%eax, %rcx
	movq	-32(%rbp), %rax
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	movb	%al, (%rdx)
	addl	$1, -8(%rbp)
.L4:
	movl	-8(%rbp), %eax
	movslq	%eax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	je	.L5
	movl	-8(%rbp), %eax
	movslq	%eax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	-36(%rbp), %al
	jne	.L6
.L5:
	movl	-8(%rbp), %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
	movl	-8(%rbp), %eax
	movslq	%eax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	je	.L7
	addl	$1, -8(%rbp)
.L7:
	movl	$0, -4(%rbp)
	nop
.L8:
	movl	-4(%rbp), %eax
	leal	1(%rax), %edx
	movl	%edx, -4(%rbp)
	movslq	%eax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movl	-8(%rbp), %edx
	leal	1(%rdx), %ecx
	movl	%ecx, -8(%rbp)
	movslq	%edx, %rcx
	movq	-32(%rbp), %rdx
	addq	%rcx, %rdx
	movzbl	(%rdx), %edx
	movb	%dl, (%rax)
	movzbl	(%rax), %eax
	testb	%al, %al
	jne	.L8
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE3:
	.size	getword, .-getword
	.type	get_line, @function
get_line:
.LFB4:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%r12
	pushq	%rbx
	subq	$32, %rsp
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -40(%rbp)
	movl	$0, %ebx
.L14:
	movslq	%ebx, %rdx
	movq	-24(%rbp), %rax
	leaq	(%rdx,%rax), %r12
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	fgetc
	movb	%al, (%r12)
	movslq	%ebx, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$13, %al
	jne	.L10
	movslq	%ebx, %rdx
	movq	-24(%rbp), %rax
	leaq	(%rdx,%rax), %r12
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	fgetc
	movb	%al, (%r12)
.L10:
	movslq	%ebx, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$4, %al
	je	.L11
	movslq	%ebx, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$10, %al
	je	.L11
	movl	-28(%rbp), %eax
	subl	$1, %eax
	cmpl	%ebx, %eax
	jne	.L12
.L11:
	movslq	%ebx, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	feof
	testl	%eax, %eax
	setne	%al
	movzbl	%al, %eax
	jmp	.L15
.L12:
	addl	$1, %ebx
	jmp	.L14
.L15:
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE4:
	.size	get_line, .-get_line
	.type	putline, @function
putline:
.LFB5:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movl	$0, -4(%rbp)
	jmp	.L17
.L18:
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movsbl	%al, %eax
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	movl	%eax, %edi
	call	fputc
	addl	$1, -4(%rbp)
.L17:
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	jne	.L18
	movq	-24(%rbp), %rax
	movq	%rax, %rsi
	movl	$10, %edi
	call	fputc
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE5:
	.size	putline, .-putline
	.data
	.align 32
	.type	itoa64, @object
	.size	itoa64, 65
itoa64:
	.string	"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
	.text
	.type	to64, @function
to64:
.LFB6:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rsi, %rcx
	movl	%edx, %eax
	jmp	.L20
.L21:
	movq	%rdi, %rdx
	leaq	1(%rdx), %rdi
	movq	%rcx, %rsi
	andl	$63, %esi
	movzbl	itoa64(%rsi), %esi
	movb	%sil, (%rdx)
	sarq	$6, %rcx
.L20:
	subl	$1, %eax
	testl	%eax, %eax
	jns	.L21
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE6:
	.size	to64, .-to64
	.section	.rodata
.LC0:
	.string	"New password:"
.LC1:
	.string	"Re-type new password:"
.LC2:
	.string	"They don't match, sorry.\n"
.LC3:
	.string	"%s:%s\n"
.LC4:
	.string	"crypt() returned NULL, sorry\n"
	.text
	.type	add_password, @function
add_password:
.LFB7:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$160, %rsp
	movq	%rdi, -152(%rbp)
	movq	%rsi, -160(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	stdin(%rip), %rax
	movq	%rax, %rdi
	call	fileno
	movl	%eax, %edi
	call	isatty
	testl	%eax, %eax
	jne	.L23
	movq	stdin(%rip), %rdx
	leaq	-112(%rbp), %rax
	movl	$100, %esi
	movq	%rax, %rdi
	call	fgets
	leaq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	strlen
	subq	$1, %rax
	movzbl	-112(%rbp,%rax), %eax
	cmpb	$10, %al
	jne	.L24
	leaq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	strlen
	subq	$1, %rax
	movb	$0, -112(%rbp,%rax)
.L24:
	leaq	-112(%rbp), %rax
	movq	%rax, -144(%rbp)
	jmp	.L25
.L23:
	movl	$.LC0, %edi
	call	getpass
	movq	%rax, %rdi
	call	strd
	movq	%rax, -144(%rbp)
	movl	$.LC1, %edi
	call	getpass
	movq	%rax, %rdx
	movq	-144(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	strcmp
	testl	%eax, %eax
	je	.L25
	movq	stderr(%rip), %rax
	movq	%rax, %rcx
	movl	$25, %edx
	movl	$1, %esi
	movl	$.LC2, %edi
	call	fwrite
	movl	tfd(%rip), %eax
	cmpl	$-1, %eax
	je	.L26
	movl	$temp_template, %edi
	call	unlink
.L26:
	movl	$1, %edi
	call	exit
.L25:
	movl	$0, %edi
	call	time
	movl	%eax, %edi
	call	srandom
	call	random
	movq	%rax, %rcx
	leaq	-128(%rbp), %rax
	movl	$2, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	to64
	leaq	-128(%rbp), %rdx
	movq	-144(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	crypt
	movq	%rax, -136(%rbp)
	cmpq	$0, -136(%rbp)
	je	.L27
	movq	-136(%rbp), %rcx
	movq	-152(%rbp), %rdx
	movq	-160(%rbp), %rax
	movl	$.LC3, %esi
	movq	%rax, %rdi
	movl	$0, %eax
	call	fprintf
	jmp	.L30
.L27:
	movq	stderr(%rip), %rax
	movq	%rax, %rcx
	movl	$29, %edx
	movl	$1, %esi
	movl	$.LC4, %edi
	call	fwrite
.L30:
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L29
	call	__stack_chk_fail
.L29:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE7:
	.size	add_password, .-add_password
	.section	.rodata
	.align 8
.LC5:
	.string	"Usage: htpasswd [-c] passwordfile username\n"
	.align 8
.LC6:
	.string	"The -c flag creates a new file.\n"
	.text
	.type	usage, @function
usage:
.LFB8:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	stderr(%rip), %rax
	movq	%rax, %rcx
	movl	$43, %edx
	movl	$1, %esi
	movl	$.LC5, %edi
	call	fwrite
	movq	stderr(%rip), %rax
	movq	%rax, %rcx
	movl	$32, %edx
	movl	$1, %esi
	movl	$.LC6, %edi
	call	fwrite
	movl	$1, %edi
	call	exit
	.cfi_endproc
.LFE8:
	.size	usage, .-usage
	.section	.rodata
.LC7:
	.string	"Interrupted.\n"
	.text
	.globl	interrupted
	.type	interrupted, @function
interrupted:
.LFB9:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movq	stderr(%rip), %rax
	movq	%rax, %rcx
	movl	$13, %edx
	movl	$1, %esi
	movl	$.LC7, %edi
	call	fwrite
	movl	tfd(%rip), %eax
	cmpl	$-1, %eax
	je	.L33
	movl	$temp_template, %edi
	call	unlink
.L33:
	movl	$1, %edi
	call	exit
	.cfi_endproc
.LFE9:
	.size	interrupted, .-interrupted
	.section	.rodata
.LC8:
	.string	"-c"
.LC9:
	.string	"w"
	.align 8
.LC10:
	.string	"Could not open passwd file %s for writing.\n"
.LC11:
	.string	"fopen"
.LC12:
	.string	"%s: filename is too long\n"
	.align 8
.LC13:
	.string	"%s: filename contains an illegal character\n"
.LC14:
	.string	"%s: username is too long\n"
	.align 8
.LC15:
	.string	"%s: username contains an illegal character\n"
.LC16:
	.string	"Adding password for %s.\n"
.LC17:
	.string	"Could not open temp file.\n"
.LC18:
	.string	"r"
	.align 8
.LC19:
	.string	"Could not open passwd file %s for reading.\n"
	.align 8
.LC20:
	.string	"Use -c option to create new one.\n"
	.align 8
.LC21:
	.string	"Changing password for user %s\n"
.LC22:
	.string	"Adding user %s\n"
.LC23:
	.string	"cp %s %s"
	.text
	.globl	main
	.type	main, @function
main:
.LFB10:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$1344, %rsp
	movl	%edi, -1332(%rbp)
	movq	%rsi, -1344(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movl	$-1, tfd(%rip)
	movl	$interrupted, %esi
	movl	$2, %edi
	call	signal
	cmpl	$4, -1332(%rbp)
	jne	.L35
	movq	-1344(%rbp), %rax
	addq	$8, %rax
	movq	(%rax), %rax
	movl	$.LC8, %esi
	movq	%rax, %rdi
	call	strcmp
	testl	%eax, %eax
	je	.L36
	call	usage
.L36:
	movq	-1344(%rbp), %rax
	addq	$16, %rax
	movq	(%rax), %rax
	movl	$.LC9, %esi
	movq	%rax, %rdi
	call	fopen
	movq	%rax, -1312(%rbp)
	cmpq	$0, -1312(%rbp)
	jne	.L37
	movq	-1344(%rbp), %rax
	addq	$16, %rax
	movq	(%rax), %rdx
	movq	stderr(%rip), %rax
	movl	$.LC10, %esi
	movq	%rax, %rdi
	movl	$0, %eax
	call	fprintf
	movl	$.LC11, %edi
	call	perror
	movl	$1, %edi
	call	exit
.L37:
	movq	-1344(%rbp), %rax
	addq	$16, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	strlen
	cmpq	$255, %rax
	jbe	.L38
	movq	-1344(%rbp), %rax
	movq	(%rax), %rdx
	movq	stderr(%rip), %rax
	movl	$.LC12, %esi
	movq	%rax, %rdi
	movl	$0, %eax
	call	fprintf
	movl	$1, %edi
	call	exit
.L38:
	movq	-1344(%rbp), %rax
	addq	$16, %rax
	movq	(%rax), %rax
	movl	$59, %esi
	movq	%rax, %rdi
	call	strchr
	testq	%rax, %rax
	jne	.L39
	movq	-1344(%rbp), %rax
	addq	$16, %rax
	movq	(%rax), %rax
	movl	$62, %esi
	movq	%rax, %rdi
	call	strchr
	testq	%rax, %rax
	je	.L40
.L39:
	movq	-1344(%rbp), %rax
	movq	(%rax), %rdx
	movq	stderr(%rip), %rax
	movl	$.LC13, %esi
	movq	%rax, %rdi
	movl	$0, %eax
	call	fprintf
	movl	$1, %edi
	call	exit
.L40:
	movq	-1344(%rbp), %rax
	addq	$24, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	strlen
	cmpq	$255, %rax
	jbe	.L41
	movq	-1344(%rbp), %rax
	movq	(%rax), %rdx
	movq	stderr(%rip), %rax
	movl	$.LC14, %esi
	movq	%rax, %rdi
	movl	$0, %eax
	call	fprintf
	movl	$1, %edi
	call	exit
.L41:
	movq	-1344(%rbp), %rax
	addq	$24, %rax
	movq	(%rax), %rax
	movl	$58, %esi
	movq	%rax, %rdi
	call	strchr
	testq	%rax, %rax
	je	.L42
	movq	-1344(%rbp), %rax
	movq	(%rax), %rdx
	movq	stderr(%rip), %rax
	movl	$.LC15, %esi
	movq	%rax, %rdi
	movl	$0, %eax
	call	fprintf
	movl	$1, %edi
	call	exit
.L42:
	movq	-1344(%rbp), %rax
	addq	$24, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	movl	$.LC16, %edi
	movl	$0, %eax
	call	printf
	movq	-1344(%rbp), %rax
	addq	$24, %rax
	movq	(%rax), %rax
	movq	-1312(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	add_password
	movq	-1312(%rbp), %rax
	movq	%rax, %rdi
	call	fclose
	movl	$0, %edi
	call	exit
.L35:
	cmpl	$3, -1332(%rbp)
	je	.L43
	call	usage
.L43:
	movl	$temp_template, %edi
	call	mkstemp
	movl	%eax, tfd(%rip)
	movl	tfd(%rip), %eax
	movl	$.LC9, %esi
	movl	%eax, %edi
	call	fdopen
	movq	%rax, -1312(%rbp)
	cmpq	$0, -1312(%rbp)
	jne	.L44
	movq	stderr(%rip), %rax
	movq	%rax, %rcx
	movl	$26, %edx
	movl	$1, %esi
	movl	$.LC17, %edi
	call	fwrite
	movl	$1, %edi
	call	exit
.L44:
	movq	-1344(%rbp), %rax
	addq	$8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	strlen
	cmpq	$255, %rax
	jbe	.L45
	movq	-1344(%rbp), %rax
	movq	(%rax), %rdx
	movq	stderr(%rip), %rax
	movl	$.LC12, %esi
	movq	%rax, %rdi
	movl	$0, %eax
	call	fprintf
	movl	$1, %edi
	call	exit
.L45:
	movq	-1344(%rbp), %rax
	addq	$8, %rax
	movq	(%rax), %rax
	movl	$59, %esi
	movq	%rax, %rdi
	call	strchr
	testq	%rax, %rax
	jne	.L46
	movq	-1344(%rbp), %rax
	addq	$8, %rax
	movq	(%rax), %rax
	movl	$62, %esi
	movq	%rax, %rdi
	call	strchr
	testq	%rax, %rax
	je	.L47
.L46:
	movq	-1344(%rbp), %rax
	movq	(%rax), %rdx
	movq	stderr(%rip), %rax
	movl	$.LC13, %esi
	movq	%rax, %rdi
	movl	$0, %eax
	call	fprintf
	movl	$1, %edi
	call	exit
.L47:
	movq	-1344(%rbp), %rax
	addq	$16, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	strlen
	cmpq	$255, %rax
	jbe	.L48
	movq	-1344(%rbp), %rax
	movq	(%rax), %rdx
	movq	stderr(%rip), %rax
	movl	$.LC14, %esi
	movq	%rax, %rdi
	movl	$0, %eax
	call	fprintf
	movl	$1, %edi
	call	exit
.L48:
	movq	-1344(%rbp), %rax
	addq	$16, %rax
	movq	(%rax), %rax
	movl	$58, %esi
	movq	%rax, %rdi
	call	strchr
	testq	%rax, %rax
	je	.L49
	movq	-1344(%rbp), %rax
	movq	(%rax), %rdx
	movq	stderr(%rip), %rax
	movl	$.LC15, %esi
	movq	%rax, %rdi
	movl	$0, %eax
	call	fprintf
	movl	$1, %edi
	call	exit
.L49:
	movq	-1344(%rbp), %rax
	addq	$8, %rax
	movq	(%rax), %rax
	movl	$.LC18, %esi
	movq	%rax, %rdi
	call	fopen
	movq	%rax, -1304(%rbp)
	cmpq	$0, -1304(%rbp)
	jne	.L50
	movq	-1344(%rbp), %rax
	addq	$8, %rax
	movq	(%rax), %rdx
	movq	stderr(%rip), %rax
	movl	$.LC19, %esi
	movq	%rax, %rdi
	movl	$0, %eax
	call	fprintf
	movq	stderr(%rip), %rax
	movq	%rax, %rcx
	movl	$33, %edx
	movl	$1, %esi
	movl	$.LC20, %edi
	call	fwrite
	movl	$1, %edi
	call	exit
.L50:
	movq	-1344(%rbp), %rax
	addq	$16, %rax
	movq	(%rax), %rdx
	leaq	-1296(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	strcpy
	movl	$0, -1316(%rbp)
	jmp	.L51
.L55:
	cmpl	$0, -1316(%rbp)
	jne	.L52
	movzbl	-1040(%rbp), %eax
	cmpb	$35, %al
	je	.L52
	movzbl	-1040(%rbp), %eax
	testb	%al, %al
	jne	.L53
.L52:
	leaq	-1040(%rbp), %rdx
	movq	-1312(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	putline
	jmp	.L51
.L53:
	leaq	-1040(%rbp), %rdx
	leaq	-784(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	strcpy
	leaq	-784(%rbp), %rcx
	leaq	-528(%rbp), %rax
	movl	$58, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	getword
	leaq	-528(%rbp), %rdx
	leaq	-1296(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	strcmp
	testl	%eax, %eax
	je	.L54
	leaq	-1040(%rbp), %rdx
	movq	-1312(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	putline
	jmp	.L51
.L54:
	leaq	-1296(%rbp), %rax
	movq	%rax, %rsi
	movl	$.LC21, %edi
	movl	$0, %eax
	call	printf
	movq	-1312(%rbp), %rdx
	leaq	-1296(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	add_password
	movl	$1, -1316(%rbp)
.L51:
	movq	-1304(%rbp), %rdx
	leaq	-1040(%rbp), %rax
	movl	$256, %esi
	movq	%rax, %rdi
	call	get_line
	testl	%eax, %eax
	je	.L55
	cmpl	$0, -1316(%rbp)
	jne	.L56
	leaq	-1296(%rbp), %rax
	movq	%rax, %rsi
	movl	$.LC22, %edi
	movl	$0, %eax
	call	printf
	movq	-1312(%rbp), %rdx
	leaq	-1296(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	add_password
.L56:
	movq	-1304(%rbp), %rax
	movq	%rax, %rdi
	call	fclose
	movq	-1312(%rbp), %rax
	movq	%rax, %rdi
	call	fclose
	movq	-1344(%rbp), %rax
	addq	$8, %rax
	movq	(%rax), %rdx
	leaq	-272(%rbp), %rax
	movq	%rdx, %rcx
	movl	$temp_template, %edx
	movl	$.LC23, %esi
	movq	%rax, %rdi
	movl	$0, %eax
	call	sprintf
	leaq	-272(%rbp), %rax
	movq	%rax, %rdi
	call	system
	movl	$temp_template, %edi
	call	unlink
	movl	$0, %edi
	call	exit
	.cfi_endproc
.LFE10:
	.size	main, .-main
	.ident	"GCC: (GNU) 5.2.0"
	.section	.note.GNU-stack,"",@progbits
