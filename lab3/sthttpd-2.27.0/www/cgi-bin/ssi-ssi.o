	.file	"ssi.c"
	.local	argv0
	.comm	argv0,8,8
	.local	url
	.comm	url,8,8
	.local	timefmt
	.comm	timefmt,100,32
	.local	sizefmt
	.comm	sizefmt,4,4
	.local	sb
	.comm	sb,144,32
	.section	.rodata
.LC0:
	.string	"500 Internal Error"
	.align 8
.LC1:
	.string	"<HTML><HEAD><TITLE>%s</TITLE></HEAD>\n<BODY><H2>%s</H2>\nSomething unusual went wrong during a server-side-includes request:\n<BLOCKQUOTE>\n%s\n</BLOCKQUOTE>\n</BODY></HTML>\n"
	.text
	.type	internal_error, @function
internal_error:
.LFB2:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	$.LC0, -8(%rbp)
	movq	-24(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rax, %rsi
	movl	$.LC1, %edi
	movl	$0, %eax
	call	printf
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE2:
	.size	internal_error, .-internal_error
	.section	.rodata
.LC2:
	.string	"404 Not Found"
	.align 8
.LC3:
	.string	"<HTML><HEAD><TITLE>%s</TITLE></HEAD>\n<BODY><H2>%s</H2>\nThe requested server-side-includes filename, %s,\ndoes not seem to exist.\n</BODY></HTML>\n"
	.text
	.type	not_found, @function
not_found:
.LFB3:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	$.LC2, -8(%rbp)
	movq	-24(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rax, %rsi
	movl	$.LC3, %edi
	movl	$0, %eax
	call	printf
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE3:
	.size	not_found, .-not_found
	.section	.rodata
.LC4:
	.string	"Not Found"
	.align 8
.LC5:
	.string	"<HR><H2>%s</H2>\nThe filename requested in a %s %s directive, %s,\ndoes not seem to exist.\n<HR>\n"
	.text
	.type	not_found2, @function
not_found2:
.LFB4:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	$.LC4, -8(%rbp)
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rsi, %r8
	movq	%rax, %rsi
	movl	$.LC5, %edi
	movl	$0, %eax
	call	printf
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE4:
	.size	not_found2, .-not_found2
	.section	.rodata
.LC6:
	.string	"Not Permitted"
	.align 8
.LC7:
	.string	"<HR><H2>%s</H2>\nThe filename requested in the %s %s=%s directive\nmay not be fetched.\n<HR>\n"
	.text
	.type	not_permitted, @function
not_permitted:
.LFB5:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	$.LC6, -8(%rbp)
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rsi, %r8
	movq	%rax, %rsi
	movl	$.LC7, %edi
	movl	$0, %eax
	call	printf
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE5:
	.size	not_permitted, .-not_permitted
	.section	.rodata
.LC8:
	.string	"Unknown Directive"
	.align 8
.LC9:
	.string	"<HR><H2>%s</H2>\nThe requested server-side-includes filename, %s,\ntried to use an unknown directive, %s.\n<HR>\n"
	.text
	.type	unknown_directive, @function
unknown_directive:
.LFB6:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$.LC8, -8(%rbp)
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rax, %rsi
	movl	$.LC9, %edi
	movl	$0, %eax
	call	printf
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE6:
	.size	unknown_directive, .-unknown_directive
	.section	.rodata
.LC10:
	.string	"Unknown Tag"
	.align 8
.LC11:
	.string	"<HR><H2>%s</H2>\nThe requested server-side-includes filename, %s,\ntried to use the directive %s with an unknown tag, %s.\n<HR>\n"
	.text
	.type	unknown_tag, @function
unknown_tag:
.LFB7:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	$.LC10, -8(%rbp)
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rsi, %r8
	movq	%rax, %rsi
	movl	$.LC11, %edi
	movl	$0, %eax
	call	printf
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE7:
	.size	unknown_tag, .-unknown_tag
	.section	.rodata
.LC12:
	.string	"Unknown Value"
	.align 8
.LC13:
	.string	"<HR><H2>%s</H2>\nThe requested server-side-includes filename, %s,\ntried to use the directive %s %s with an unknown value, %s.\n<HR>\n"
	.text
	.type	unknown_value, @function
unknown_value:
.LFB8:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	$.LC12, -8(%rbp)
	movq	-48(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdi, %r9
	movq	%rsi, %r8
	movq	%rax, %rsi
	movl	$.LC13, %edi
	movl	$0, %eax
	call	printf
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE8:
	.size	unknown_value, .-unknown_value
	.section	.rodata
.LC14:
	.string	"virtual"
.LC15:
	.string	"../"
.LC16:
	.string	"file"
	.text
	.type	get_filename, @function
get_filename:
.LFB9:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	%r8, -72(%rbp)
	movq	%r9, -80(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	strlen
	movl	%eax, -32(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	strlen
	movl	%eax, -28(%rbp)
	movq	-64(%rbp), %rax
	movl	$.LC14, %esi
	movq	%rax, %rdi
	call	strcmp
	testl	%eax, %eax
	jne	.L9
	movq	-72(%rbp), %rax
	movl	$.LC15, %esi
	movq	%rax, %rdi
	call	strstr
	testq	%rax, %rax
	je	.L10
	movq	-72(%rbp), %rdx
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	not_permitted
	movl	$-1, %eax
	jmp	.L11
.L10:
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jg	.L12
	movl	-28(%rbp), %eax
	subl	-32(%rbp), %eax
	movslq	%eax, %rdx
	movq	-48(%rbp), %rax
	addq	%rax, %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	strcmp
	testl	%eax, %eax
	je	.L13
.L12:
	movl	$-1, %eax
	jmp	.L11
.L13:
	movl	-28(%rbp), %eax
	subl	-32(%rbp), %eax
	movslq	%eax, %rbx
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	strlen
	leaq	(%rbx,%rax), %rdx
	movl	16(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	jb	.L14
	movl	$-1, %eax
	jmp	.L11
.L14:
	movl	-28(%rbp), %eax
	subl	-32(%rbp), %eax
	movslq	%eax, %rdx
	movq	-48(%rbp), %rcx
	movq	-80(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strncpy
	movl	-28(%rbp), %eax
	subl	-32(%rbp), %eax
	movslq	%eax, %rdx
	movq	-80(%rbp), %rax
	addq	%rax, %rdx
	movq	-72(%rbp), %rax
	movq	%rax, %rsi
	movq	%rdx, %rdi
	call	strcpy
	jmp	.L15
.L9:
	movq	-64(%rbp), %rax
	movl	$.LC16, %esi
	movq	%rax, %rdi
	call	strcmp
	testl	%eax, %eax
	jne	.L16
	movq	-72(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$47, %al
	je	.L17
	movq	-72(%rbp), %rax
	movl	$.LC15, %esi
	movq	%rax, %rdi
	call	strstr
	testq	%rax, %rax
	je	.L18
.L17:
	movq	-72(%rbp), %rdx
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	not_permitted
	movl	$-1, %eax
	jmp	.L11
.L18:
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rbx
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	strlen
	leaq	(%rbx,%rax), %rdx
	movl	16(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	jb	.L19
	movl	$-1, %eax
	jmp	.L11
.L19:
	movq	-48(%rbp), %rdx
	movq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	strcpy
	movq	-80(%rbp), %rax
	movl	$47, %esi
	movq	%rax, %rdi
	call	strrchr
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L20
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	strlen
	movq	%rax, %rdx
	movq	-80(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movb	$47, (%rax)
.L20:
	addq	$1, -24(%rbp)
	movq	-72(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	strcpy
	jmp	.L15
.L16:
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rcx
	movq	-48(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	unknown_tag
	movl	$-1, %eax
	jmp	.L11
.L15:
	movl	$0, %eax
.L11:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE9:
	.size	get_filename, .-get_filename
	.section	.rodata
.LC17:
	.string	"CGI_PATTERN"
.LC18:
	.string	".htpasswd"
.LC19:
	.string	"%s/%s"
	.text
	.type	check_filename, @function
check_filename:
.LFB10:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$208, %rsp
	movq	%rdi, -200(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movl	inited.3244(%rip), %eax
	testl	%eax, %eax
	jne	.L22
	movl	$.LC17, %edi
	call	getenv
	movq	%rax, cgi_pattern.3245(%rip)
	movl	$1, inited.3244(%rip)
.L22:
	movq	-200(%rbp), %rax
	movl	$.LC15, %esi
	movq	%rax, %rdi
	call	strstr
	testq	%rax, %rax
	je	.L23
	movl	$0, %eax
	jmp	.L33
.L23:
	movq	-200(%rbp), %rax
	movq	%rax, %rdi
	call	strlen
	movl	%eax, -192(%rbp)
	movq	-200(%rbp), %rax
	movl	$.LC18, %esi
	movq	%rax, %rdi
	call	strcmp
	testl	%eax, %eax
	je	.L25
	movl	-192(%rbp), %eax
	cmpl	$9, %eax
	jbe	.L26
	movl	-192(%rbp), %eax
	cltq
	leaq	-9(%rax), %rdx
	movq	-200(%rbp), %rax
	addq	%rdx, %rax
	movl	$.LC18, %esi
	movq	%rax, %rdi
	call	strcmp
	testl	%eax, %eax
	jne	.L26
	movl	-192(%rbp), %eax
	cltq
	leaq	-10(%rax), %rdx
	movq	-200(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$47, %al
	jne	.L26
.L25:
	movl	$0, %eax
	jmp	.L33
.L26:
	movq	-200(%rbp), %rax
	movq	%rax, %rdi
	call	strdup
	movq	%rax, -184(%rbp)
	cmpq	$0, -184(%rbp)
	jne	.L27
	movl	$0, %eax
	jmp	.L33
.L27:
	movq	-184(%rbp), %rax
	movl	$47, %esi
	movq	%rax, %rdi
	call	strrchr
	movq	%rax, -176(%rbp)
	cmpq	$0, -176(%rbp)
	jne	.L28
	movq	-184(%rbp), %rax
	movw	$46, (%rax)
	jmp	.L29
.L28:
	movq	-176(%rbp), %rax
	movb	$0, (%rax)
.L29:
	movq	-184(%rbp), %rax
	movq	%rax, %rdi
	call	strlen
	addq	$11, %rax
	movq	%rax, %rdi
	call	malloc
	movq	%rax, -168(%rbp)
	cmpq	$0, -168(%rbp)
	jne	.L30
	movq	-184(%rbp), %rax
	movq	%rax, %rdi
	call	free
	movl	$0, %eax
	jmp	.L33
.L30:
	movq	-184(%rbp), %rdx
	movq	-168(%rbp), %rax
	movl	$.LC18, %ecx
	movl	$.LC19, %esi
	movq	%rax, %rdi
	movl	$0, %eax
	call	sprintf
	leaq	-160(%rbp), %rdx
	movq	-168(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	stat
	movl	%eax, -188(%rbp)
	movq	-184(%rbp), %rax
	movq	%rax, %rdi
	call	free
	movq	-168(%rbp), %rax
	movq	%rax, %rdi
	call	free
	cmpl	$0, -188(%rbp)
	jne	.L31
	movl	$0, %eax
	jmp	.L33
.L31:
	movq	cgi_pattern.3245(%rip), %rax
	testq	%rax, %rax
	je	.L32
	movq	cgi_pattern.3245(%rip), %rax
	movq	-200(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	match
	testl	%eax, %eax
	je	.L32
	movl	$0, %eax
	jmp	.L33
.L32:
	movl	$1, %eax
.L33:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L34
	call	__stack_chk_fail
.L34:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE10:
	.size	check_filename, .-check_filename
	.type	show_time, @function
show_time:
.LFB11:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$544, %rsp
	movq	%rdi, -536(%rbp)
	movl	%esi, -540(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpl	$0, -540(%rbp)
	je	.L36
	leaq	-536(%rbp), %rax
	movq	%rax, %rdi
	call	gmtime
	movq	%rax, -520(%rbp)
	jmp	.L37
.L36:
	leaq	-536(%rbp), %rax
	movq	%rax, %rdi
	call	localtime
	movq	%rax, -520(%rbp)
.L37:
	movq	-520(%rbp), %rdx
	leaq	-512(%rbp), %rax
	movq	%rdx, %rcx
	movl	$timefmt, %edx
	movl	$500, %esi
	movq	%rax, %rdi
	call	strftime
	testq	%rax, %rax
	je	.L40
	movq	stdout(%rip), %rdx
	leaq	-512(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	fputs
.L40:
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L39
	call	__stack_chk_fail
.L39:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE11:
	.size	show_time, .-show_time
	.section	.rodata
.LC20:
	.string	"%ld"
.LC21:
	.string	"%ldK"
.LC22:
	.string	"%ldM"
.LC23:
	.string	"%ldG"
	.text
	.type	show_size, @function
show_size:
.LFB12:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	sizefmt(%rip), %eax
	testl	%eax, %eax
	je	.L43
	cmpl	$1, %eax
	je	.L44
	jmp	.L50
.L43:
	movq	-8(%rbp), %rax
	movq	%rax, %rsi
	movl	$.LC20, %edi
	movl	$0, %eax
	call	printf
	jmp	.L42
.L44:
	cmpq	$1023, -8(%rbp)
	jg	.L45
	movq	-8(%rbp), %rax
	movq	%rax, %rsi
	movl	$.LC20, %edi
	movl	$0, %eax
	call	printf
	jmp	.L49
.L45:
	cmpq	$1023, -8(%rbp)
	jg	.L47
	movq	-8(%rbp), %rax
	leaq	1023(%rax), %rdx
	testq	%rax, %rax
	cmovs	%rdx, %rax
	sarq	$10, %rax
	movq	%rax, %rsi
	movl	$.LC21, %edi
	movl	$0, %eax
	call	printf
	jmp	.L49
.L47:
	cmpq	$1048575, -8(%rbp)
	jg	.L48
	movq	-8(%rbp), %rax
	leaq	1048575(%rax), %rdx
	testq	%rax, %rax
	cmovs	%rdx, %rax
	sarq	$20, %rax
	movq	%rax, %rsi
	movl	$.LC22, %edi
	movl	$0, %eax
	call	printf
	jmp	.L49
.L48:
	movq	-8(%rbp), %rax
	leaq	1073741823(%rax), %rdx
	testq	%rax, %rax
	cmovs	%rdx, %rax
	sarq	$30, %rax
	movq	%rax, %rsi
	movl	$.LC23, %edi
	movl	$0, %eax
	call	printf
.L49:
	nop
.L42:
.L50:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE12:
	.size	show_size, .-show_size
	.section	.rodata
.LC24:
	.string	"timefmt"
.LC25:
	.string	"sizefmt"
.LC26:
	.string	"bytes"
.LC27:
	.string	"abbrev"
	.text
	.type	do_config, @function
do_config:
.LFB13:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	-40(%rbp), %rax
	movl	$.LC24, %esi
	movq	%rax, %rdi
	call	strcmp
	testl	%eax, %eax
	jne	.L52
	movq	-48(%rbp), %rax
	movl	$99, %edx
	movq	%rax, %rsi
	movl	$timefmt, %edi
	call	strncpy
	movb	$0, timefmt+99(%rip)
	jmp	.L58
.L52:
	movq	-40(%rbp), %rax
	movl	$.LC25, %esi
	movq	%rax, %rdi
	call	strcmp
	testl	%eax, %eax
	jne	.L54
	movq	-48(%rbp), %rax
	movl	$.LC26, %esi
	movq	%rax, %rdi
	call	strcmp
	testl	%eax, %eax
	jne	.L55
	movl	$0, sizefmt(%rip)
	jmp	.L58
.L55:
	movq	-48(%rbp), %rax
	movl	$.LC27, %esi
	movq	%rax, %rdi
	call	strcmp
	testl	%eax, %eax
	jne	.L57
	movl	$1, sizefmt(%rip)
	jmp	.L58
.L57:
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	unknown_value
	jmp	.L58
.L54:
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movq	-16(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	unknown_tag
.L58:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE13:
	.size	do_config, .-do_config
	.section	.rodata
.LC28:
	.string	"r"
	.text
	.type	do_include, @function
do_include:
.LFB14:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$2088, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -2056(%rbp)
	movq	%rsi, -2064(%rbp)
	movq	%rdx, -2072(%rbp)
	movq	%rcx, -2080(%rbp)
	movq	%r8, -2088(%rbp)
	movq	%r9, -2096(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	subq	$8, %rsp
	leaq	-1024(%rbp), %r8
	movq	-2096(%rbp), %rdi
	movq	-2088(%rbp), %rcx
	movq	-2080(%rbp), %rdx
	movq	-2064(%rbp), %rsi
	movq	-2056(%rbp), %rax
	pushq	$1000
	movq	%r8, %r9
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	get_filename
	addq	$16, %rsp
	testl	%eax, %eax
	js	.L72
	leaq	-1024(%rbp), %rax
	movq	%rax, %rdi
	call	check_filename
	testl	%eax, %eax
	jne	.L62
	leaq	-1024(%rbp), %rdx
	movq	-2088(%rbp), %rcx
	movq	-2080(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	not_permitted
	jmp	.L59
.L62:
	leaq	-1024(%rbp), %rax
	movl	$.LC28, %esi
	movq	%rax, %rdi
	call	fopen
	movq	%rax, -2040(%rbp)
	cmpq	$0, -2040(%rbp)
	jne	.L63
	leaq	-1024(%rbp), %rdx
	movq	-2088(%rbp), %rcx
	movq	-2080(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	not_found2
	jmp	.L59
.L63:
	movq	-2088(%rbp), %rax
	movl	$.LC14, %esi
	movq	%rax, %rdi
	call	strcmp
	testl	%eax, %eax
	jne	.L64
	movq	-2096(%rbp), %rax
	movq	%rax, %rdi
	call	strlen
	cmpq	$999, %rax
	ja	.L65
	movq	-2096(%rbp), %rdx
	leaq	-2032(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	strcpy
	jmp	.L67
.L65:
	leaq	-1024(%rbp), %rdx
	leaq	-2032(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	strcpy
	jmp	.L67
.L64:
	movq	-2056(%rbp), %rax
	movq	%rax, %rdi
	call	strlen
	movq	%rax, %rbx
	movq	-2096(%rbp), %rax
	movq	%rax, %rdi
	call	strlen
	addq	%rbx, %rax
	addq	$1, %rax
	cmpq	$999, %rax
	ja	.L68
	movq	-2056(%rbp), %rdx
	leaq	-2032(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	strcpy
	leaq	-2032(%rbp), %rax
	movl	$47, %esi
	movq	%rax, %rdi
	call	strrchr
	movq	%rax, -2048(%rbp)
	cmpq	$0, -2048(%rbp)
	jne	.L69
	leaq	-2032(%rbp), %rax
	movq	%rax, %rdi
	call	strlen
	movq	%rax, %rdx
	leaq	-2032(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -2048(%rbp)
	movq	-2048(%rbp), %rax
	movb	$47, (%rax)
.L69:
	addq	$1, -2048(%rbp)
	movq	-2096(%rbp), %rdx
	movq	-2048(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	strcpy
	jmp	.L67
.L68:
	leaq	-1024(%rbp), %rdx
	leaq	-2032(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	strcpy
.L67:
	movq	-2040(%rbp), %rdx
	leaq	-1024(%rbp), %rcx
	leaq	-2032(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	read_file
	movq	-2040(%rbp), %rax
	movq	%rax, %rdi
	call	fclose
	jmp	.L59
.L72:
	nop
.L59:
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L71
	call	__stack_chk_fail
.L71:
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE14:
	.size	do_include, .-do_include
	.section	.rodata
.LC29:
	.string	"var"
.LC30:
	.string	"DOCUMENT_NAME"
.LC31:
	.string	"DOCUMENT_URI"
.LC32:
	.string	"QUERY_STRING_UNESCAPED"
.LC33:
	.string	"QUERY_STRING"
.LC34:
	.string	"DATE_LOCAL"
.LC35:
	.string	"DATE_GMT"
.LC36:
	.string	"LAST_MODIFIED"
	.text
	.type	do_echo, @function
do_echo:
.LFB15:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -56(%rbp)
	movq	%r9, -64(%rbp)
	movq	-56(%rbp), %rax
	movl	$.LC29, %esi
	movq	%rax, %rdi
	call	strcmp
	testl	%eax, %eax
	je	.L74
	movq	-56(%rbp), %rdx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	unknown_tag
	jmp	.L85
.L74:
	movq	-64(%rbp), %rax
	movl	$.LC30, %esi
	movq	%rax, %rdi
	call	strcmp
	testl	%eax, %eax
	jne	.L76
	movq	stdout(%rip), %rdx
	movq	-32(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	fputs
	jmp	.L85
.L76:
	movq	-64(%rbp), %rax
	movl	$.LC31, %esi
	movq	%rax, %rdi
	call	strcmp
	testl	%eax, %eax
	jne	.L77
	movq	stdout(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	fputs
	jmp	.L85
.L77:
	movq	-64(%rbp), %rax
	movl	$.LC32, %esi
	movq	%rax, %rdi
	call	strcmp
	testl	%eax, %eax
	jne	.L78
	movl	$.LC33, %edi
	call	getenv
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	je	.L85
	movq	stdout(%rip), %rdx
	movq	-16(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	fputs
	jmp	.L85
.L78:
	movq	-64(%rbp), %rax
	movl	$.LC34, %esi
	movq	%rax, %rdi
	call	strcmp
	testl	%eax, %eax
	jne	.L80
	movl	$0, %edi
	call	time
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	show_time
	jmp	.L85
.L80:
	movq	-64(%rbp), %rax
	movl	$.LC35, %esi
	movq	%rax, %rdi
	call	strcmp
	testl	%eax, %eax
	jne	.L81
	movl	$0, %edi
	call	time
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	show_time
	jmp	.L85
.L81:
	movq	-64(%rbp), %rax
	movl	$.LC36, %esi
	movq	%rax, %rdi
	call	strcmp
	testl	%eax, %eax
	jne	.L82
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	fileno
	movl	$sb, %esi
	movl	%eax, %edi
	call	fstat
	testl	%eax, %eax
	js	.L85
	movq	sb+88(%rip), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	show_time
	jmp	.L85
.L82:
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	getenv
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.L84
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rdx
	movq	-48(%rbp), %rsi
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	unknown_value
	jmp	.L85
.L84:
	movq	stdout(%rip), %rdx
	movq	-16(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	fputs
.L85:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE15:
	.size	do_echo, .-do_echo
	.type	do_fsize, @function
do_fsize:
.LFB16:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$1056, %rsp
	movq	%rdi, -1016(%rbp)
	movq	%rsi, -1024(%rbp)
	movq	%rdx, -1032(%rbp)
	movq	%rcx, -1040(%rbp)
	movq	%r8, -1048(%rbp)
	movq	%r9, -1056(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	subq	$8, %rsp
	leaq	-1008(%rbp), %r8
	movq	-1056(%rbp), %rdi
	movq	-1048(%rbp), %rcx
	movq	-1040(%rbp), %rdx
	movq	-1024(%rbp), %rsi
	movq	-1016(%rbp), %rax
	pushq	$1000
	movq	%r8, %r9
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	get_filename
	addq	$16, %rsp
	testl	%eax, %eax
	js	.L92
	leaq	-1008(%rbp), %rax
	movl	$sb, %esi
	movq	%rax, %rdi
	call	stat
	testl	%eax, %eax
	jns	.L89
	leaq	-1008(%rbp), %rdx
	movq	-1048(%rbp), %rcx
	movq	-1040(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	not_found2
	jmp	.L86
.L89:
	movq	sb+48(%rip), %rax
	movq	%rax, %rdi
	call	show_size
	jmp	.L86
.L92:
	nop
.L86:
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L91
	call	__stack_chk_fail
.L91:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE16:
	.size	do_fsize, .-do_fsize
	.type	do_flastmod, @function
do_flastmod:
.LFB17:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$1056, %rsp
	movq	%rdi, -1016(%rbp)
	movq	%rsi, -1024(%rbp)
	movq	%rdx, -1032(%rbp)
	movq	%rcx, -1040(%rbp)
	movq	%r8, -1048(%rbp)
	movq	%r9, -1056(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	subq	$8, %rsp
	leaq	-1008(%rbp), %r8
	movq	-1056(%rbp), %rdi
	movq	-1048(%rbp), %rcx
	movq	-1040(%rbp), %rdx
	movq	-1024(%rbp), %rsi
	movq	-1016(%rbp), %rax
	pushq	$1000
	movq	%r8, %r9
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	get_filename
	addq	$16, %rsp
	testl	%eax, %eax
	js	.L99
	leaq	-1008(%rbp), %rax
	movl	$sb, %esi
	movq	%rax, %rdi
	call	stat
	testl	%eax, %eax
	jns	.L96
	leaq	-1008(%rbp), %rdx
	movq	-1048(%rbp), %rcx
	movq	-1040(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	not_found2
	jmp	.L93
.L96:
	movq	sb+88(%rip), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	show_time
	jmp	.L93
.L99:
	nop
.L93:
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L98
	call	__stack_chk_fail
.L98:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE17:
	.size	do_flastmod, .-do_flastmod
	.section	.rodata
.LC37:
	.string	" \t\n\r"
.LC38:
	.string	" \t\n\r\""
.LC39:
	.string	"config"
.LC40:
	.string	"include"
.LC41:
	.string	"echo"
.LC42:
	.string	"fsize"
.LC43:
	.string	"flastmod"
.LC44:
	.string	""
	.text
	.type	parse, @function
parse:
.LFB18:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$1696, %rsp
	movq	%rdi, -1672(%rbp)
	movq	%rsi, -1680(%rbp)
	movq	%rdx, -1688(%rbp)
	movq	%rcx, -1696(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-1696(%rbp), %rax
	movq	%rax, -1624(%rbp)
	movq	-1624(%rbp), %rax
	movl	$.LC37, %esi
	movq	%rax, %rdi
	call	strspn
	addq	%rax, -1624(%rbp)
	movl	$0, -1652(%rbp)
	movq	-1624(%rbp), %rax
	movq	%rax, -1640(%rbp)
.L106:
	movq	-1640(%rbp), %rax
	movl	$.LC38, %esi
	movq	%rax, %rdi
	call	strpbrk
	movq	%rax, -1640(%rbp)
	cmpq	$0, -1640(%rbp)
	je	.L128
	movq	-1640(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$34, %al
	jne	.L103
	movq	-1640(%rbp), %rax
	addq	$1, %rax
	movl	$34, %esi
	movq	%rax, %rdi
	call	strchr
	movq	%rax, -1640(%rbp)
	addq	$1, -1640(%rbp)
	movq	-1640(%rbp), %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	je	.L129
.L103:
	movq	-1640(%rbp), %rax
	leaq	1(%rax), %rdx
	movq	%rdx, -1640(%rbp)
	movb	$0, (%rax)
	movq	-1640(%rbp), %rax
	movl	$.LC37, %esi
	movq	%rax, %rdi
	call	strspn
	addq	%rax, -1640(%rbp)
	movq	-1640(%rbp), %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	je	.L130
	movl	-1652(%rbp), %eax
	cmpl	$199, %eax
	ja	.L106
	movl	-1652(%rbp), %eax
	leal	1(%rax), %edx
	movl	%edx, -1652(%rbp)
	cltq
	movq	-1640(%rbp), %rdx
	movq	%rdx, -1616(%rbp,%rax,8)
	jmp	.L106
.L128:
	nop
	jmp	.L102
.L129:
	nop
	jmp	.L102
.L130:
	nop
.L102:
	movq	-1624(%rbp), %rax
	movl	$.LC39, %esi
	movq	%rax, %rdi
	call	strcmp
	testl	%eax, %eax
	jne	.L107
	movl	$0, -1648(%rbp)
	jmp	.L108
.L107:
	movq	-1624(%rbp), %rax
	movl	$.LC40, %esi
	movq	%rax, %rdi
	call	strcmp
	testl	%eax, %eax
	jne	.L109
	movl	$1, -1648(%rbp)
	jmp	.L108
.L109:
	movq	-1624(%rbp), %rax
	movl	$.LC41, %esi
	movq	%rax, %rdi
	call	strcmp
	testl	%eax, %eax
	jne	.L110
	movl	$2, -1648(%rbp)
	jmp	.L108
.L110:
	movq	-1624(%rbp), %rax
	movl	$.LC42, %esi
	movq	%rax, %rdi
	call	strcmp
	testl	%eax, %eax
	jne	.L111
	movl	$3, -1648(%rbp)
	jmp	.L108
.L111:
	movq	-1624(%rbp), %rax
	movl	$.LC43, %esi
	movq	%rax, %rdi
	call	strcmp
	testl	%eax, %eax
	jne	.L112
	movl	$4, -1648(%rbp)
	jmp	.L108
.L112:
	movq	-1624(%rbp), %rdx
	movq	-1680(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	unknown_directive
	jmp	.L100
.L108:
	movl	$0, -1644(%rbp)
	jmp	.L114
.L126:
	cmpl	$0, -1644(%rbp)
	jle	.L115
	movl	$32, %edi
	call	putchar
.L115:
	movl	-1644(%rbp), %eax
	cltq
	movq	-1616(%rbp,%rax,8), %rax
	movl	$61, %esi
	movq	%rax, %rdi
	call	strchr
	movq	%rax, -1632(%rbp)
	cmpq	$0, -1632(%rbp)
	jne	.L116
	movq	$.LC44, -1632(%rbp)
	jmp	.L117
.L116:
	movq	-1632(%rbp), %rax
	leaq	1(%rax), %rdx
	movq	%rdx, -1632(%rbp)
	movb	$0, (%rax)
.L117:
	movq	-1632(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$34, %al
	jne	.L118
	movq	-1632(%rbp), %rax
	movq	%rax, %rdi
	call	strlen
	leaq	-1(%rax), %rdx
	movq	-1632(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$34, %al
	jne	.L118
	movq	-1632(%rbp), %rax
	movq	%rax, %rdi
	call	strlen
	leaq	-1(%rax), %rdx
	movq	-1632(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
	addq	$1, -1632(%rbp)
.L118:
	cmpl	$4, -1648(%rbp)
	ja	.L119
	movl	-1648(%rbp), %eax
	movq	.L121(,%rax,8), %rax
	jmp	*%rax
	.section	.rodata
	.align 8
	.align 4
.L121:
	.quad	.L120
	.quad	.L122
	.quad	.L123
	.quad	.L124
	.quad	.L125
	.text
.L120:
	movl	-1644(%rbp), %eax
	cltq
	movq	-1616(%rbp,%rax,8), %rdi
	movq	-1632(%rbp), %r8
	movq	-1624(%rbp), %rcx
	movq	-1688(%rbp), %rdx
	movq	-1680(%rbp), %rsi
	movq	-1672(%rbp), %rax
	movq	%r8, %r9
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	do_config
	jmp	.L119
.L122:
	movl	-1644(%rbp), %eax
	cltq
	movq	-1616(%rbp,%rax,8), %rdi
	movq	-1632(%rbp), %r8
	movq	-1624(%rbp), %rcx
	movq	-1688(%rbp), %rdx
	movq	-1680(%rbp), %rsi
	movq	-1672(%rbp), %rax
	movq	%r8, %r9
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	do_include
	jmp	.L119
.L123:
	movl	-1644(%rbp), %eax
	cltq
	movq	-1616(%rbp,%rax,8), %rdi
	movq	-1632(%rbp), %r8
	movq	-1624(%rbp), %rcx
	movq	-1688(%rbp), %rdx
	movq	-1680(%rbp), %rsi
	movq	-1672(%rbp), %rax
	movq	%r8, %r9
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	do_echo
	jmp	.L119
.L124:
	movl	-1644(%rbp), %eax
	cltq
	movq	-1616(%rbp,%rax,8), %rdi
	movq	-1632(%rbp), %r8
	movq	-1624(%rbp), %rcx
	movq	-1688(%rbp), %rdx
	movq	-1680(%rbp), %rsi
	movq	-1672(%rbp), %rax
	movq	%r8, %r9
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	do_fsize
	jmp	.L119
.L125:
	movl	-1644(%rbp), %eax
	cltq
	movq	-1616(%rbp,%rax,8), %rdi
	movq	-1632(%rbp), %r8
	movq	-1624(%rbp), %rcx
	movq	-1688(%rbp), %rdx
	movq	-1680(%rbp), %rsi
	movq	-1672(%rbp), %rax
	movq	%r8, %r9
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	do_flastmod
	nop
.L119:
	addl	$1, -1644(%rbp)
.L114:
	movl	-1644(%rbp), %eax
	cmpl	-1652(%rbp), %eax
	jl	.L126
.L100:
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L127
	call	__stack_chk_fail
.L127:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE18:
	.size	parse, .-parse
	.type	slurp, @function
slurp:
.LFB19:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$1056, %rsp
	movq	%rdi, -1032(%rbp)
	movq	%rsi, -1040(%rbp)
	movq	%rdx, -1048(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movl	$0, -1020(%rbp)
	movl	$0, -1016(%rbp)
	jmp	.L132
.L143:
	movl	-1016(%rbp), %eax
	cmpl	$3, %eax
	je	.L134
	cmpl	$4, %eax
	je	.L135
	testl	%eax, %eax
	jne	.L133
	cmpl	$45, -1012(%rbp)
	jne	.L145
	movl	$3, -1016(%rbp)
	jmp	.L145
.L134:
	cmpl	$45, -1012(%rbp)
	jne	.L138
	movl	$4, -1016(%rbp)
	jmp	.L133
.L138:
	movl	$0, -1016(%rbp)
	jmp	.L133
.L135:
	cmpl	$62, -1012(%rbp)
	jne	.L140
	movl	-1020(%rbp), %eax
	subl	$2, %eax
	cltq
	movb	$0, -1008(%rbp,%rax)
	leaq	-1008(%rbp), %rcx
	movq	-1048(%rbp), %rdx
	movq	-1040(%rbp), %rsi
	movq	-1032(%rbp), %rax
	movq	%rax, %rdi
	call	parse
	jmp	.L131
.L140:
	cmpl	$45, -1012(%rbp)
	je	.L146
	movl	$0, -1016(%rbp)
	jmp	.L146
.L145:
	nop
	jmp	.L133
.L146:
	nop
.L133:
	movl	-1020(%rbp), %eax
	cmpl	$998, %eax
	ja	.L132
	movl	-1020(%rbp), %eax
	leal	1(%rax), %edx
	movl	%edx, -1020(%rbp)
	movl	-1012(%rbp), %edx
	cltq
	movb	%dl, -1008(%rbp,%rax)
.L132:
	movq	-1048(%rbp), %rax
	movq	%rax, %rdi
	call	_IO_getc
	movl	%eax, -1012(%rbp)
	cmpl	$-1, -1012(%rbp)
	jne	.L143
.L131:
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L144
	call	__stack_chk_fail
.L144:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE19:
	.size	slurp, .-slurp
	.section	.rodata
.LC45:
	.string	"<!"
.LC46:
	.string	"<!-"
.LC47:
	.string	"<!--"
	.text
	.type	read_file, @function
read_file:
.LFB20:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movl	$0, -8(%rbp)
	jmp	.L148
.L161:
	cmpl	$4, -8(%rbp)
	ja	.L149
	movl	-8(%rbp), %eax
	movq	.L151(,%rax,8), %rax
	jmp	*%rax
	.section	.rodata
	.align 8
	.align 4
.L151:
	.quad	.L150
	.quad	.L152
	.quad	.L153
	.quad	.L154
	.quad	.L155
	.text
.L150:
	cmpl	$60, -4(%rbp)
	jne	.L162
	movl	$1, -8(%rbp)
	jmp	.L148
.L152:
	cmpl	$33, -4(%rbp)
	jne	.L157
	movl	$2, -8(%rbp)
	jmp	.L148
.L157:
	movl	$0, -8(%rbp)
	movl	$60, %edi
	call	putchar
	jmp	.L149
.L153:
	cmpl	$45, -4(%rbp)
	jne	.L158
	movl	$3, -8(%rbp)
	jmp	.L148
.L158:
	movl	$0, -8(%rbp)
	movq	stdout(%rip), %rax
	movq	%rax, %rcx
	movl	$2, %edx
	movl	$1, %esi
	movl	$.LC45, %edi
	call	fwrite
	jmp	.L149
.L154:
	cmpl	$45, -4(%rbp)
	jne	.L159
	movl	$4, -8(%rbp)
	jmp	.L148
.L159:
	movl	$0, -8(%rbp)
	movq	stdout(%rip), %rax
	movq	%rax, %rcx
	movl	$3, %edx
	movl	$1, %esi
	movl	$.LC46, %edi
	call	fwrite
	jmp	.L149
.L155:
	cmpl	$35, -4(%rbp)
	jne	.L160
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	slurp
	movl	$0, -8(%rbp)
	jmp	.L148
.L160:
	movl	$0, -8(%rbp)
	movq	stdout(%rip), %rax
	movq	%rax, %rcx
	movl	$4, %edx
	movl	$1, %esi
	movl	$.LC47, %edi
	call	fwrite
	jmp	.L149
.L162:
	nop
.L149:
	movl	-4(%rbp), %eax
	movsbl	%al, %eax
	movl	%eax, %edi
	call	putchar
.L148:
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	_IO_getc
	movl	%eax, -4(%rbp)
	cmpl	$-1, -4(%rbp)
	jne	.L161
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE20:
	.size	read_file, .-read_file
	.section	.rodata
.LC48:
	.string	"Content-type: text/html\n\n"
.LC49:
	.string	"SCRIPT_NAME"
	.align 8
.LC50:
	.string	"Couldn't get SCRIPT_NAME environment variable."
.LC51:
	.string	"PATH_INFO"
.LC52:
	.string	"Out of memory."
.LC53:
	.string	"%s%s"
.LC54:
	.string	"PATH_TRANSLATED"
	.align 8
.LC55:
	.string	"Couldn't get PATH_TRANSLATED environment variable."
.LC56:
	.string	"initial"
	.text
	.globl	main
	.type	main, @function
main:
.LFB21:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset 3, -24
	movl	%edi, -52(%rbp)
	movq	%rsi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, argv0(%rip)
	movabsq	$7288267177870778661, %rax
	movq	%rax, timefmt(%rip)
	movabsq	$2675237294160749856, %rax
	movq	%rax, timefmt+8(%rip)
	movw	$89, timefmt+16(%rip)
	movl	$0, sizefmt(%rip)
	movq	stdout(%rip), %rax
	movq	%rax, %rcx
	movl	$25, %edx
	movl	$1, %esi
	movl	$.LC48, %edi
	call	fwrite
	movl	$.LC49, %edi
	call	getenv
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.L164
	movl	$.LC50, %edi
	call	internal_error
	movl	$1, %edi
	call	exit
.L164:
	movl	$.LC51, %edi
	call	getenv
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	jne	.L165
	movq	$.LC44, -48(%rbp)
.L165:
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	strlen
	addq	%rbx, %rax
	addq	$1, %rax
	movq	%rax, %rdi
	call	malloc
	movq	%rax, url(%rip)
	movq	url(%rip), %rax
	testq	%rax, %rax
	jne	.L166
	movl	$.LC52, %edi
	call	internal_error
	movl	$1, %edi
	call	exit
.L166:
	movq	url(%rip), %rax
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	$.LC53, %esi
	movq	%rax, %rdi
	movl	$0, %eax
	call	sprintf
	movl	$.LC54, %edi
	call	getenv
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.L167
	movl	$.LC55, %edi
	call	internal_error
	movl	$1, %edi
	call	exit
.L167:
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	check_filename
	testl	%eax, %eax
	jne	.L168
	movq	-32(%rbp), %rax
	movq	%rax, %rdx
	movl	$.LC54, %esi
	movl	$.LC56, %edi
	call	not_permitted
	movl	$1, %edi
	call	exit
.L168:
	movq	-32(%rbp), %rax
	movl	$.LC28, %esi
	movq	%rax, %rdi
	call	fopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L169
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	not_found
	movl	$1, %edi
	call	exit
.L169:
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movq	-48(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	read_file
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	fclose
	movl	$0, %edi
	call	exit
	.cfi_endproc
.LFE21:
	.size	main, .-main
	.local	inited.3244
	.comm	inited.3244,4,4
	.local	cgi_pattern.3245
	.comm	cgi_pattern.3245,8,8
	.ident	"GCC: (GNU) 5.2.0"
	.section	.note.GNU-stack,"",@progbits
